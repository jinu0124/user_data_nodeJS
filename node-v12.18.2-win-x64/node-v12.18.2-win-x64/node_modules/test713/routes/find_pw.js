const express = require('express'); // nodejs express 사용
const app = express();
const router = express.Router();
const crypto = require("crypto");
//const enc = require("./encryption");

var mariadb_con = require('../routes/mariadb_conn.js')();

const config = require('../routes/key_iv.js');

// find_pw .JS (비밀번호 찾기)
exports.get = function(req, res){
	var sql = ""; //
	
	res.render('find_pw');
}

exports.post = function(req, res){
	var connection = mariadb_con.init();
	mariadb_con.test_open(connection); // DB connection Open
	
	var id = req.param("id");
	var name = req.param("name");
	var phone_num = req.param("phone_num");	
	
	var sql = "select pw from client where id=\'" + String(id) + "\' and name like \'" + String(name) + "\' and phone_num=\'" + String(phone_num) + "\';"; //
	
	connection.query(sql, function(error, rows, fields){
//		function a2hex(str){
//			console.log(str.length);
//			
//		    var arr = [];
//		    for (var j = 0; j < str.length - 2; j=j+2){
//		    	arr.push(str.substr(j, (j+2)));
//		    }
//		    console.log(arr);
//		    
//		    l = str.length;
//		    for (var i = 0; i < l; i++){
//			    console.log(i);
//			    console.log(str(i));
//			    
//			    var hex = Number(str.charCodeAt(i)).toString(16);
//			    console.log(hex);
//			    arr.push(hex);
//		    }
//		    console.log(hex);
//		    return arr.join('');
//		}
		
		function decrypt(msg, decoding){
			var de_aes = crypto.createDecipheriv('aes-192-cbc', config.key, config.iv);
			de_aes.setAutoPadding(false);
			
			let dec = de_aes.update(msg, decoding, 'utf8');
			dec += de_aes.final('utf8');
			
			// 암호화 시 기존 PW를 뒤집어서 concatenation 후 16자리로 잘라서 암호화 하였기 때문에 복호화 시에도 역순 필요
			for(var i=0; i<dec.length/2; i++){
				var prev = dec.substr(i*2, 8-i); // substr(시작 인덱스, 시작으로부터 몇번째 인덱스 까지)***
				var after = dec.substr(i+8, dec.length - i);
				
				after = after.split("").reverse().join(""); // reverse
				
				if(prev==after){
					var len = dec.length - after.length;
					return dec.substr(0, dec.length-after.length);  // 복호화 된 값에서 Mirroring 된 값을 뺀 후 return 해준다.
				}
			}
			return dec;
		}
		
		try{
			if(!error){
				console.log("SQL 성공");
				var pw = rows[0]["pw"];
				pw = pw.toString("utf8");  // DB에서 ASCII 코드 값(39 30 46 ..)으로 받아오기 때문에 utf8로 변환 필요
				var decrypt_pw = decrypt(pw, 'hex');
				res.render('pw', {user_pw: decrypt_pw});
			}
			else{
				console.log("SQL 문 이상");
			}
		}
		catch(e){
			console.log("SQL 문 이상");
		}
	})
}

