const express = require('express'); // nodejs express 사용
const app = express();
const router = express.Router();
const crypto = require("crypto");

var config = require('../routes/key_iv.js');

var mariadb_con = require('../routes/mariadb_conn.js')();

// 회원가입 확인 & DB 적용 창 (register_form)
//req : 응답, res : 보내는 결과
exports.post = function(req, res){ 		
	var connection = mariadb_con.init();

	mariadb_con.test_open(connection);
	
	var name = req.param("name");
	var id = req.param("id");
	var pw = req.param("pw");
	var age_year = req.param("age_year");
	var age_month = req.param("age_month");
	var age_day = req.param("age_day");
	var gender = req.param("gender");
	var phone_num = req.param("phone_num");
	
	var dict = new Object();

	var level="bronze";
	
	var today = new Date();
	var register_day = today.getDate();
	var register_month = today.getMonth() + 1; // JAN = 1
	var register_year = today.getFullYear();
	
	var age = 0;
	
	 // 만나이 계산
	if (age_month - register_month <= 1){
		age = register_year - age_year;  
	}
	else if (age_month - register_month == 0){
		if (age_day - register_day > 0){
			age = register_year - age_year - 1;
		}
		else{
			age = register_year - age_year; 
		}
	}
	else if(age_month - register_month > 0){
		age = register_year - age_year - 1;
	}

	var register_date = register_year + "_" + register_month + "_" + register_day;
	
	function encrypt(msg, encoding){
		msg += msg.split("").reverse().join(""); // 뒤집어서 Concatenation하기
		msg = msg.substr(0, 16); // 16글자 자르기
		console.log(msg)
		var aes = crypto.createCipheriv('aes-192-cbc', config.key, config.iv);
		aes.setAutoPadding(false);
		  // nodejs에서는 데이터를 패딩하고 패딩 전체를 원래 메시지에 추가한다. 따라서 AutoPadding을 false로 해준다.(python과 연동하기 위함)
		var crypted = aes.update(msg, 'utf8', encoding);
		
		crypted += aes.final(encoding);
		
		return crypted;
	}
	
	var encrypted_hex = encrypt(pw, 'hex');
	var encrypted_base64 = encrypt(pw, 'base64');
	
	var sql = "insert into client(id, pw, level, age, register_date, name, gender, delete_flag, phone_num, train_flag) values(" +
			"\'"+ String(id) + "\', \'" + encrypted_hex + "\', \'" + String(level) + "\',"
			+ Number(age) + ",\'" + String(register_date) + "\',\'" + String(name) + "\',\'" + String(gender) + "\', 0, \'"  + String(phone_num) + "\', 0);";
	
	connection.query(sql, function(error, rows, fields){
		try{
			if(!error){
				res.render('register_complete'); // register_complete.ejs 렌더
			}
			else{
				console.log("회원가입이 제대로 이루어지지 않았습니다. SQL 문 이상");
			}
		}
		catch(e){
			console.log("회원가입이 제대로 이루어지지 않았습니다. SQL 문 이상");
		}
	})
};
