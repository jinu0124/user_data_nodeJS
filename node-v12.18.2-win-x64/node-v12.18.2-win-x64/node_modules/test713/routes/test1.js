const express = require('express'); // nodejs express 사용
const app = express();
const router = express.Router();
const crypto = require("crypto");

const config = require('../routes/key_iv.js');

var mariadb_con = require('../routes/mariadb_conn.js')();

function wrong(){
	alert('비밀번호가 틀렸습니다. 회');
}

// 파이썬으로 사용자인식하는 프로젝트에서 사용자정보 DB에 넣을 수 있도록 DB Table 구축하기
//req : 응답, res : 보내는 결과
exports.post = function(req, res){ 		
	var connection = mariadb_con.init();

	mariadb_con.test_open(connection);
	
	var input_id = req.param("user_id");
	var input_pw = req.param("user_pw");
	
	function encrypt(msg, encoding){
		msg += msg.split("").reverse().join(""); // 뒤집어서 Concatenation하기
		msg = msg.substr(0, 16); // 16글자 자르기
		console.log(msg)
		var aes = crypto.createCipheriv('aes-192-cbc', config.key, config.iv);
		aes.setAutoPadding(false);
		  // nodejs에서는 데이터를 패딩하고 패딩 전체를 원래 메시지에 추가한다. 따라서 AutoPadding을 false로 해준다.(python과 연동하기 위함)
		var crypted = aes.update(msg, 'utf8', encoding);
		
		crypted += aes.final(encoding);
		
		return crypted;
	}
	
	var encrypted_hex = encrypt(input_pw, 'hex');
	var encrypted_base64 = encrypt(input_pw, 'base64');
	
	console.log("암호화 된 value 입니다 : " + encrypted_hex);

	var dict = new Object();
//	global.info_dict = new Object(); // global 변수 info_dict 선언
	
	var sql = "select * from client where id = \'" + input_id + "\' and delete_flag = 0;";
	connection.query(sql, function (error, rows, fields){
		try{
			if(!error){
				if(rows.length == 1){
					var pw = rows[0]['pw']; // 데이터 전송 구간 보안 or DB데이터 보안
					dict.client_id = rows[0]['client_id'];
					dict.id = rows[0]['id']
					dict.level = rows[0]['level'];
					dict.age = rows[0]['age'];
					dict.reg_date = rows[0]['reg_date'];
					dict.name = rows[0]['name'];
					dict.gender = rows[0]['gender'];
					dict.phone = rows[0]['phone'];
					
					info_dict.client_id = rows[0]['client_id'];
					info_dict.id = rows[0]['id']
					info_dict.level = rows[0]['level'];
					info_dict.age = rows[0]['age'];
					info_dict.reg_date = rows[0]['register_date'];
					info_dict.name = rows[0]['name'];
					info_dict.gender = rows[0]['gender'];
					info_dict.phone = rows[0]['phone_num'];
					
					if(encrypted_hex == pw){
						console.log("input_id :" + input_id);
						res.render('logon', {dictionary: dict});
					}
					else{
						console.log('PW 에러');
						var flags = "meanless";
						res.render('pw_err', {flag: flags});
						return
					}
				}
				else{
					console.log('없는 ID');
					var flags = "meanless";
					res.render('pw_err', {flag: flags});
					return
				}
			}
			else{
				console.log('존재하지 않는 ID 입니다.');
				console.log('query error : ' + error);
				return
			}
		}
		catch(e){
			console.log('Unknown Error.');
			return
		}
		finally{
			mariadb_con.test_close(connection);
//			connection.end();
			return
		}
	})
	
//	res.render('logon', {user_id: req.param("user_id")});
//	res.render('logon', {user_id: req.param("user_pw")});
};



//exports.get = function(req, res){ 
//
////app.get('/logon', function(req, res){
//	var sql = 'select * from user;';
//	connection.query(sql, function (error, rows, fields){
//		if(!error){
//			for (var i = 0; i < rows.length; i++)
//				{
//				console.log(rows[i]);
//				}
//		}
//		else{
//			console.log('query error : ' + error);
//		}
//	})
////})
//console.log(req.param("user_id")); // req.param('id')를 통해서 값을 받을 수 있다.
//console.log(req.param("user_pw"));
//
//res.render('logon', {user_id: req.param("user_id")});  // views의 test.ejs로 값을 보낸다.
//res.render('logon', {user_id: req.param("user_pw")});
//};



//var sql = require('../routes/show_all_data')();
////app.use('/show_all_data', sql);
//
//console.log('start!');
//
//sql.select(function(err, data){
//	console.log('hello');
//	if (err) console.log(err, 'error');
//	else console.log(data);
//	
//	sql.pool.end(function(err){
//		console.log('Finished.');
//	});
//});