const express = require('express'); // nodejs express 사용
const app = express();
const router = express.Router();
const crypto = require("crypto");

var config = require('../routes/key_iv.js');

var mariadb_con = require('../routes/mariadb_conn.js')();

// 회원가입 확인 & DB 적용 창 (register_form)
//req : 응답, res : 보내는 결과
exports.post = function(req, res){ 		
	var connection = mariadb_con.init();

	mariadb_con.test_open(connection);
	
	var pw = req.param("pw");
	var client_id = req.param("client_id")
	var dict = new Object();
	
	console.log("withdraw_check :" + client_id + pw);
	
	function encrypt(msg, encoding){
		msg += msg.split("").reverse().join(""); // 뒤집어서 Concatenation하기
		msg = msg.substr(0, 16); // 16글자 자르기
		console.log(msg)
		var aes = crypto.createCipheriv('aes-192-cbc', config.key, config.iv);
		aes.setAutoPadding(false);
		  // nodejs에서는 데이터를 패딩하고 패딩 전체를 원래 메시지에 추가한다. 따라서 AutoPadding을 false로 해준다.(python과 연동하기 위함)
		var crypted = aes.update(msg, 'utf8', encoding);
		
		crypted += aes.final(encoding);
		
		return crypted;
	}
	
	var encrypted_hex = encrypt(pw, 'hex');
	var encrypted_base64 = encrypt(pw, 'base64');
	
	var sql_1 = "select pw from client where pw = \'" + encrypted_hex + "\' and client_id = " + client_id + ";";
	
	var sql_2 = "update client set delete_flag = 1 where client_id = " + client_id + ";";
	
	connection.query(sql_1, function(error, rows, fields){
		// pw가 일치한다면 쿼리로부터 1개의 row가 출력될 것이다. 따라서 출력되는 쿼리가 없다면 비밀번호가 틀린 것이다.
		if(rows.length > 0){
//			var db_pw = rows[0]['pw'];
//			db_pw = db_pw.toString("utf8");  // DB에서 ASCII 코드 값(39 30 46 ..)으로 받아오기 때문에 utf8로 변환 필요
			connection.query(sql_2, function(error, rows, fields){
				if(!error){
					console.log("성공적으로 delete flag가 반영되었습니다.");
					res.render("withdraw_confirm");
				}
				else{
					console.log("sql_2 error");
				}
			})
		}
		else{
			var flags = "wrong"
			res.render('pw_err', {flag: flags});
		}
	})
	
	
};
